C51 COMPILER V9.00   MAIN                                                                  03/09/2015 22:43:03 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          
   2          #include <intrins.h>
   3          #include <stdio.h>
   4          #include <math.h>
   5          #include "LPCREG.H"
   6          #include "max7219.h"
   7          #include<stdarg.h>  
   8          
   9          #define uchar unsigned char
  10          #define uint  unsigned int
  11          
  12          /*************  用户系统配置    **************/
  13          
  14          #define MAIN_Fosc               18432000L       //定义主时钟, 模拟串口和和延时会自动适应。5~35MHZ
  15          
  16          #define STATUS_SLEEP    0
  17          #define STATUS_BARCODE_CHECK    1
  18          #define STATUS_WEIGHT_CHECK     2
  19          #define STATUS_GPRS_SEND        3
  20          #define DOOR_CLOSE   0
  21          #define DOOR_OPEN    1
  22          
  23          #define  TL0_5MS_INI    0X25
  24          #define  TH0_5MS_INI    0XE2
  25          
  26          #define  TL1_5MS_INI    0X25
  27          #define  TH1_5MS_INI    0XE2
  28          
  29          #define A_X128 (128)
  30          #define B_X32  (32)
  31          #define A_X64  (64)
  32          
  33          unsigned int idata g_ucGlobalState = 0;
  34          unsigned int idata SystemTime = 0;
  35          unsigned int idata weight_time = 0;
  36          unsigned long prior_total_weight = 0;
  37          
  38          /************* 本地变量声明 **************/
  39          sbit P_TXD1 = P2^6;
  40          sbit BARCODE_TRIGGER = P2^7;
  41          sbit ADSK = P2^2;  //ADSK
  42          sbit ADDO = P2^3;  //ADDO
  43          sbit DOORST = P0^2;  //door status
  44          sbit DOORLS = P0^1;  //door limit switch
  45          /************* 本地函数声明 **************/
  46          void    Tx1Send(uchar dat);
  47          void    sendstring(unsigned char *string);
  48          void    uart_printf(const char *fmt,...);
  49          void    Lcd_show_number(unsigned int weight);
  50          /************* GPRS **************/
  51          #define PHASE_ATE0      2
  52          #define PHASE_BEARER_CONFIG1    3
  53          #define PHASE_BEARER_CONFIG2    4
  54          #define PHASE_GPRS_OPEN     14
  55          #define PHASE_GPRS_QUERY        15
C51 COMPILER V9.00   MAIN                                                                  03/09/2015 22:43:03 PAGE 2   

  56          #define PHASE_HTTP_INIT 16
  57          #define PHASE_HTTP_PARA1        17
  58          #define PHASE_HTTP_PARA2        18
  59          #define PHASE_HTTP_GET  28
  60          #define PHASE_HTTP_READ 29
  61          #define PHASE_HTTP_TERM 30
  62          #define PHASE_GPRS_CLOSE        31
  63          
  64          #define PHASE_CMGD      50
  65          #define PHASE_CMGS_NUMBER       51
  66          #define PHASE_CMGS_CONTENT      52
  67          
  68          #define PHASE_NULL      127
  69          
  70          #define RECEIVE_BUFFER_SIZE 16
  71          #define SEND_BUFFER_SIZE 16
  72          
  73          unsigned char code phone_number[11]="18618600000";
  74          unsigned int code g_CollectorSn=10001;
  75          
  76          unsigned char read_data_counter;
  77          unsigned int idata ActionWaitTime;
  78          
  79          unsigned char g_usPhase = 0;
  80          char idata encode_data[SEND_BUFFER_SIZE];
  81          char idata read_buffer[RECEIVE_BUFFER_SIZE];
  82          char idata barcode_buffer[RECEIVE_BUFFER_SIZE];
  83          
  84          
  85          extern void* memset(void* s, char ch, int n);
  86          void sim900_http(void);
  87          char com_send_reply(char* s, unsigned char s_len, unsigned char wait_time);
  88          int strlen(char* lpString);
  89          
  90          void Lcd_show_number(unsigned int num);
  91          
  92          unsigned int read_current_weight_data;
  93          
  94          char* mystrchr(char* s,char c)
  95          {
  96   1        while(*s != '\0' && *s != c)
  97   1        {
  98   2          ++s;
  99   2        }
 100   1        return *s == c ?s:0;
 101   1      }
 102          
 103          char *mystrstr(const char *s1, const char *s2)
 104          {
 105   1              int n;
 106   1              if (*s2)
 107   1              {
 108   2                      while (*s1)
 109   2                      {
 110   3                              for (n=0; *(s1 + n) == *(s2 + n); n++)
 111   3                              {
 112   4                                      if (!*(s2 + n + 1))
 113   4                                              return (char *)s1;
 114   4                              }
 115   3                              s1++;
 116   3                      }
 117   2                      return 0;
C51 COMPILER V9.00   MAIN                                                                  03/09/2015 22:43:03 PAGE 3   

 118   2              }
 119   1              else
 120   1                      return (char *)s1;
 121   1      }
 122          
 123          void t0(void) interrupt 0// using 2   //外部中断0的函数
 124          {
 125   1      }
 126          
 127          void timer0 (void) interrupt 1    //定时器T0
 128          {
 129   1              TH0=TH0_5MS_INI;
 130   1              TL0=TL0_5MS_INI;
 131   1      
 132   1              if (SystemTime != 0)
 133   1              {
 134   2                      SystemTime--;
 135   2              }
 136   1      
 137   1              if (ActionWaitTime != 0)
 138   1              {
 139   2                      ActionWaitTime--;
 140   2              }
 141   1      
 142   1              if(weight_time != 0)
 143   1              {
 144   2                 weight_time--;
 145   2              }
 146   1      }
 147          
 148          /*-------------------------------------------------------
 149          功能:串口初始化,波特率115200 方式1 8 UART
 150          -------------------------------------------------------*/
 151          void Init_Com1(void)
 152          {
 153   1              PCON = 0x00;
 154   1              SCON = 0x50;  // mode 1: 8-bit UART, enable receiver(模式1: 8位异步发送/接收, 使能接收允许位)
 155   1              SM2  = 1;     //SETB  O9DH      ;收到有效的停止位时才将RI置1
 156   1      
 157   1              AUXR |= 0x40;           //定时器1时钟为Fosc,即1T
 158   1              AUXR &= 0xFE;           //串口1选择定时器1为波特率发生器
 159   1      
 160   1              TMOD &= 0x0F;           //清除定时器1模式位
 161   1              TMOD |= 0x20;           //设定定时器1为8位自动重装方式
 162   1              
 163   1              TH1 = 0xFB;
 164   1              TL1 = 0xFB;
 165   1      
 166   1              TR1 = 1;
 167   1              AUXR1=0x00;  //0x80:p1  0x00:p3
 168   1      
 169   1      }
 170          
 171          void Init_Com2(void)
 172          {
 173   1              SCON = 0x50;
 174   1              AUXR |= 0x40;           //定时器1时钟为Fosc,即1T
 175   1              AUXR &= 0xFE;           //串口1选择定时器1为波特率发生器
 176   1      
 177   1              TMOD &= 0x0F;           //清除定时器1模式位
 178   1              TMOD |= 0x20;           //设定定时器1为8位自动重装方式
 179   1              
C51 COMPILER V9.00   MAIN                                                                  03/09/2015 22:43:03 PAGE 4   

 180   1              TH1 = 0xC4;//FB;
 181   1              TL1 = 0xC4;//FB;
 182   1      
 183   1              TR1 = 1;
 184   1              AUXR1 |= 0x80;
 185   1      
 186   1      }
 187          
 188          void uart_char(char mychar)
 189          {       
 190   1              TI = 0;
 191   1              RI = 0;
 192   1              
 193   1              SBUF=mychar;
 194   1              while(!TI);                             // 串口数据没发送完成则一直等待
 195   1      }
 196          
 197          /*====================================================================
 198          设定延时时间:x*1ms
 199          ====================================================================*/
 200          void DelayMs(uint Ms)
 201          {
 202   1              uint i,TempCyc;
 203   1              for(i=0;i<Ms;i++)
 204   1              {
 205   2                      TempCyc = 250;
 206   2                      while(TempCyc--);
 207   2              }
 208   1      }
 209          
 210          char com_send_reply(char* s, unsigned char s_len, unsigned char wait_time)
 211          {
 212   1              unsigned char rec_count;
 213   1              unsigned char index;    
 214   1      
 215   1              sprintf(encode_data, s);
 216   1              for(index = 0; index<s_len; index++)            //发送8字节
 217   1              {
 218   2                      TI=0;
 219   2                  SBUF = encode_data[index];
 220   2                      while(!TI);// 串口数据没发送完成则一直等待
 221   2              }
 222   1      
 223   1      
 224   1              if(wait_time > 0)
 225   1              {
 226   2                      ActionWaitTime=wait_time*10;
 227   2                      rec_count = 0;
 228   2                      memset(read_buffer, 0 ,RECEIVE_BUFFER_SIZE);
 229   2                      while(ActionWaitTime!=0)//读应答数据
 230   2                      {
 231   3                              if ( RI )
 232   3                              {
 233   4                                      read_buffer[rec_count] = SBUF;                  //接收数据 SBUF 为单片机的接收发送缓冲寄存器
 234   4                                      RI = 0;
 235   4                                      rec_count++;
 236   4              
 237   4                                      if(rec_count>1 && read_buffer[rec_count-1]=='\r' && read_buffer[rec_count-2]!='K')
 238   4                                      {
 239   5                                              rec_count = 0;
 240   5                                              memset(read_buffer, 0 ,RECEIVE_BUFFER_SIZE);
 241   5                                      }
C51 COMPILER V9.00   MAIN                                                                  03/09/2015 22:43:03 PAGE 5   

 242   4              
 243   4                                      if(rec_count >= RECEIVE_BUFFER_SIZE)
 244   4                                      {
 245   5                                              rec_count = 0;
 246   5                                      }
 247   4                              }
 248   3                      }       
 249   2                      memset(read_buffer+rec_count, 0, 1);
 250   2                                      
 251   2                      ActionWaitTime = wait_time*10;
 252   2                      if(mystrstr((char*)read_buffer, "OK"))
 253   2                      {
 254   3                              return 1;
 255   3                      }
 256   2                      if(mystrstr((char*)read_buffer, "> "))
 257   2                      {
 258   3                              return 1;
 259   3                      }
 260   2                      ///超时
 261   2                      if(SystemTime==0)
 262   2                      {
 263   3                              return 1;
 264   3                      }
 265   2                      
 266   2                      ///灯闪
 267   2      
 268   2              }
 269   1              uart_printf("RI 5\r\n");        
 270   1              return 0;
 271   1      }
 272          
 273          void sim900_http()
 274          {
 275   1              unsigned int num;
 276   1              
 277   1              TL1 = 0XFB;
 278   1              TH1 = 0XFB;
 279   1              TR1 = 1;
 280   1      
 281   1              TI = 0;
 282   1              RI = 0;
 283   1      
 284   1              g_usPhase = PHASE_ATE0;
 285   1      
 286   1              while(g_usPhase!=PHASE_NULL)
 287   1              {
 288   2                      if(g_usPhase==PHASE_ATE0)
 289   2                 {
 290   3              uart_printf("sim900_http 1\r\n");       
 291   3                              if(com_send_reply("ATE0\r\n", 6, 5))
 292   3                                      g_usPhase = PHASE_BEARER_CONFIG1;
 293   3      
 294   3                      }
 295   2                      else if(g_usPhase==PHASE_BEARER_CONFIG1)
 296   2                 {
 297   3              uart_printf("sim900_http 2\r\n");       
 298   3      
 299   3                              com_send_reply("AT+SAPBR=3,1,\"", 14, 0);
 300   3      
 301   3                              com_send_reply("Contype\"", 8, 0);
 302   3      
 303   3                              if(com_send_reply(",\"GPRS\"\r\n", 9, 5))
C51 COMPILER V9.00   MAIN                                                                  03/09/2015 22:43:03 PAGE 6   

 304   3                                      g_usPhase = PHASE_BEARER_CONFIG2;
 305   3      
 306   3                      }
 307   2                      else if(g_usPhase==PHASE_BEARER_CONFIG2)
 308   2                 {
 309   3              uart_printf("sim900_http 3\r\n");       
 310   3                              com_send_reply("AT+SAPBR=3,1,\"", 14, 0);
 311   3      
 312   3                              com_send_reply("APN\"", 4, 0);
 313   3      
 314   3                              if(com_send_reply(",\"CMNET\"\r\n", 10, 5))
 315   3                                      g_usPhase = PHASE_GPRS_OPEN;
 316   3      
 317   3                      }
 318   2                      else if(g_usPhase==PHASE_GPRS_OPEN)
 319   2                      {
 320   3              uart_printf("sim900_http 4\r\n");       
 321   3                              if(com_send_reply("AT+SAPBR=1,1\r\n", 14, 25))
 322   3                                      g_usPhase = PHASE_GPRS_QUERY;
 323   3      
 324   3                 }
 325   2                      else if(g_usPhase==PHASE_GPRS_QUERY)
 326   2                      {
 327   3              uart_printf("sim900_http 5\r\n");       
 328   3                              if(com_send_reply("AT+SAPBR=2,1\r\n", 14, 5))
 329   3                                      g_usPhase = PHASE_HTTP_INIT;
 330   3      
 331   3                 }
 332   2                      else if(g_usPhase==PHASE_HTTP_INIT)
 333   2                      {
 334   3                              if(com_send_reply("AT+HTTPINIT\r\n", 13, 5))
 335   3                                      g_usPhase = PHASE_HTTP_PARA1;
 336   3      
 337   3                 }
 338   2                      else if(g_usPhase==PHASE_HTTP_PARA1)
 339   2                      {
 340   3                              com_send_reply("AT+HTTPPARA=\"", 13, 0);
 341   3      
 342   3                              com_send_reply("CID\"", 4, 0);
 343   3      
 344   3                              if(com_send_reply(",1\r\n", 4, 5))
 345   3                                      g_usPhase = PHASE_HTTP_PARA2;
 346   3      
 347   3                 }
 348   2                      else if(g_usPhase==PHASE_HTTP_PARA2)
 349   2                      {
 350   3                              com_send_reply("AT+HTTPPARA=\"", 13, 0);
 351   3      
 352   3                              com_send_reply("URL\"", 4, 0);
 353   3      
 354   3                              com_send_reply(",\"sz.lucki.cn:1", 15, 0);
 355   3      
 356   3                              com_send_reply("8000/traceapp/u", 15, 0);
 357   3                              
 358   3                              com_send_reply("pload/?barcode=", 15, 0);
 359   3      
 360   3                              sprintf(encode_data, "%s", "1000000002"/*barcode_buffer*/, 1);
 361   3                              com_send_reply(encode_data, strlen(encode_data), 0);
 362   3                              
 363   3                              sprintf(encode_data, "&key=%s", "AAAAA", 1);
 364   3                              com_send_reply(encode_data, strlen(encode_data), 0);
 365   3              
C51 COMPILER V9.00   MAIN                                                                  03/09/2015 22:43:03 PAGE 7   

 366   3                              num = read_current_weight_data;
 367   3                              if(num>1000)
 368   3                                      num = 1000;
 369   3                              
 370   3                              sprintf(encode_data, "&weight=%d\"\r\n", read_current_weight_data);
 371   3                              
 372   3                              if(com_send_reply(encode_data, strlen(encode_data), 5))
 373   3                                      g_usPhase = PHASE_HTTP_GET;
 374   3                              
 375   3                 }
 376   2                      else if(g_usPhase==PHASE_HTTP_GET)
 377   2                      {
 378   3                              com_send_reply("AT+HTTPACTION", 13, 0);
 379   3      
 380   3                              if(com_send_reply("=0\r\n", 4, 35))
 381   3                                      g_usPhase = PHASE_HTTP_READ;
 382   3                                      
 383   3                 }
 384   2                      else if(g_usPhase==PHASE_HTTP_READ)
 385   2                      {
 386   3                              if(com_send_reply("AT+HTTPREAD\r\n", 13, 35))
 387   3                                      g_usPhase = PHASE_HTTP_TERM;
 388   3      
 389   3                 }
 390   2                      else if(g_usPhase==PHASE_HTTP_TERM)
 391   2                      {
 392   3                              if(com_send_reply("AT+HTTPTERM\r\n", 13, 5))
 393   3                                      g_usPhase = PHASE_GPRS_CLOSE;
 394   3      
 395   3                 }
 396   2                      else if(g_usPhase==PHASE_GPRS_CLOSE)
 397   2                      {
 398   3                              if(com_send_reply("AT+SAPBR=0,1\r\n", 14, 5))
 399   3                                      g_usPhase = PHASE_NULL;
 400   3      
 401   3                 }
 402   2         }
 403   1      }
 404          
 405          void barcode_check(void)
 406          {
 407   1        char barcode_rec_count = 0;
 408   1        uart_printf("barcode_check\r\n");
 409   1      
 410   1      TI = 0;
 411   1      RI = 0;
 412   1      ActionWaitTime=200;
 413   1                              TL0 = TL0_5MS_INI;
 414   1                              TH0 = TH0_5MS_INI;
 415   1                              TR0 = 1;
 416   1      
 417   1      barcode_rec_count = 0;
 418   1        memset(barcode_buffer, 0 ,RECEIVE_BUFFER_SIZE);
 419   1        while(ActionWaitTime!=0)//读应答数据
 420   1        {
 421   2          if ( RI )
 422   2          {
 423   3            barcode_buffer[barcode_rec_count] = SBUF;                 //接收数据 SBUF 为单片机的接收发送缓冲寄存器
 424   3            RI = 0;
 425   3            barcode_rec_count++;
 426   3          }
 427   2        }     
C51 COMPILER V9.00   MAIN                                                                  03/09/2015 22:43:03 PAGE 8   

 428   1      
 429   1        barcode_buffer[barcode_rec_count] = 0;
 430   1              
 431   1        uart_printf("barcode(%s)\r\n",barcode_buffer);
 432   1      
 433   1      }
 434          
 435          //读取HX711芯片的原始数据
 436          unsigned long ReadValue(unsigned char mode)
 437          {
 438   1        unsigned long count;
 439   1        unsigned char i;
 440   1        ADDO = 1;
 441   1        DelayMs(4); 
 442   1      
 443   1        switch(mode)
 444   1        {
 445   2          case A_X128:i=25;break;
 446   2              case B_X32 :i=26;break;
 447   2              case A_X64 :i=27;break;
 448   2          default    :break;
 449   2        }
 450   1      
 451   1        for(;i;i--)
 452   1        {
 453   2          ADSK=1;
 454   2              ADSK=0;
 455   2        }
 456   1      
 457   1        ADSK = 0;          //使能AD
 458   1        count = 0; 
 459   1        while(ADDO);   //AD转换未结束则等待，否则开始读取
 460   1        for(i=0;i<24;i++)
 461   1        {
 462   2          ADSK = 1;    //PD_SCK 置高(发送脉冲)
 463   2              count = count << 1;      //下降沿来时变量conut左移一位，右侧补零
 464   2              ADSK = 0;
 465   2              if(ADDO)
 466   2              {
 467   3                count++;
 468   3              }
 469   2        }
 470   1        ADSK = 1;
 471   1        ADSK = 0;
 472   1        if(count&0x800000)
 473   1        {
 474   2          count|=0xFF800000;
 475   2        }
 476   1        else
 477   1        {
 478   2          count&=0x007FFFFF;
 479   2        }
 480   1        return(count);
 481   1      }
 482          
 483          //存储历史的垃圾重量
 484          set_total_weight_value(void)
 485          {
 486   1        unsigned long weight;
 487   1        weight = ReadValue(A_X128);
 488   1        prior_total_weight = weight/1000;
 489   1        uart_printf("the prior_total_weight is %lld\r\n",prior_total_weight);
C51 COMPILER V9.00   MAIN                                                                  03/09/2015 22:43:03 PAGE 9   

 490   1      }
 491          
 492          //把HX711的原始数据转换成重量
 493          unsigned int weight_check(void)
 494          {
 495   1        unsigned long weight;
 496   1        unsigned long weight_offset;
 497   1        uart_printf("weight_check\r\n");
 498   1        weight = ReadValue(A_X128)/1000;
 499   1        uart_printf("the weighit(%lld)\r\n",weight);
 500   1        //当前统计结果减去历史结果，得出当次的垃圾重量
 501   1        weight = weight-prior_total_weight;
 502   1        weight_offset = abs(weight);
 503   1        if(weight_offset < 5)
 504   1        {
 505   2          weight = 0;
 506   2        }
 507   1        uart_printf("the weighit1(%lld)\r\n",weight);
 508   1        CLEAR_DISPLAY();              //清显示
 509   1        DISPLAY_NORMAL();             //切换到正常显示模式
 510   1        DelayMs(10);
 511   1        Lcd_show_number((unsigned int)weight);
 512   1        weight = (weight * 25)/10;
 513   1        uart_printf("the weighit2 is %lld\r\n",weight);
 514   1        return weight;
 515   1      }
 516          
 517          main()   
 518          {
 519   1      
 520   1              DOORST = 1;                    //初始化门是关闭的
 521   1              DOORLS = DOOR_OPEN;                        //限位开关默认为输入，所以设置为1
 522   1              uart_printf("****** START ******\r\n"); 
 523   1      
 524   1              Init_Max7219();                 //配置max7219
 525   1              DISPLAY_TEST();                 //测试模式，测试数码管是否能正常能全部点亮
 526   1              DelayMs(10);
 527   1              CLEAR_DISPLAY();                //清显示
 528   1              DISPLAY_NORMAL();               //切换到正常显示模式
 529   1              DelayMs(10);
 530   1      
 531   1              TMOD &= 0x21;//20;
 532   1              
 533   1              g_ucGlobalState = STATUS_SLEEP;
 534   1      
 535   1      
 536   1              while(1)
 537   1              {
 538   2                  
 539   2                      ///超时判断
 540   2                      if(     SystemTime==0 )
 541   2                      {
 542   3                              g_ucGlobalState = STATUS_SLEEP;
 543   3                              ADSK = 1;
 544   3                              ADDO = 1;
 545   3                                      
 546   3                      uart_printf("SLEEP\r\n");       
 547   3                              CLEAR_DISPLAY();                //清显示
 548   3                              DISPLAY_NORMAL();               //切换到正常显示模式
 549   3                              DelayMs(10);
 550   3                      }
 551   2                      //uart_printf("g_ucGlobalState(%d)\r\n",g_ucGlobalState);
C51 COMPILER V9.00   MAIN                                                                  03/09/2015 22:43:03 PAGE 10  

 552   2                      switch(g_ucGlobalState)
 553   2                      {       
 554   3                    case STATUS_SLEEP:
 555   3                          ///if ( SystemTime==0 )
 556   3                              {
 557   4                              BARCODE_TRIGGER = 1;
 558   4      
 559   4                              TMOD = 0x21;//20;
 560   4      
 561   4                              IE=0;
 562   4                              TR1 = 0;
 563   4                              TCON=0X30;                      // START T0
 564   4      
 565   4                              WDT_CONTR=15;
 566   4      
 567   4                              P0 = 0xFF;
 568   4                              P1 = 0xFF;
 569   4                              P2 = 0xFF;
 570   4                              P3 = 0xFF;
 571   4                              P4 = 0xFF;
 572   4                              EX0=1;
 573   4                              EA=1;
 574   4      
 575   4                              PCON=0X02;  //掉电控制位,写1可以使MCU进入PowerDown模式
 576   4      
 577   4                              _nop_();
 578   4                              _nop_();
 579   4                              _nop_();
 580   4      
 581   4                              EX0=0;
 582   4      
 583   4                              PCON = 0x00;  
 584   4                      uart_printf("WAKE\r\n");        
 585   4                              IE=0;
 586   4                              
 587   4                              TL0=TL0_5MS_INI;
 588   4                              TH0=TH0_5MS_INI;
 589   4                              ET0=1;
 590   4                              EA=1;
 591   4                              set_total_weight_value();   //test the pro
 592   4                              g_ucGlobalState = STATUS_WEIGHT_CHECK;
 593   4                              SystemTime=5000;        //1s
 594   4                              //TR0 = 1;
 595   4                              //TR1 = 1;
 596   4      
 597   4                              ADSK = 0;
 598   4                              ADDO = 0;
 599   4                              break;
 600   4                              }
 601   3      
 602   3                        case STATUS_BARCODE_CHECK:
 603   3                              {
 604   4                                if(DOORLS != DOOR_CLOSE)
 605   4                                {
 606   5                                       g_ucGlobalState = STATUS_WEIGHT_CHECK;
 607   5                                       uart_printf("wait door close\r\n");
 608   5                                       break;
 609   5                                }
 610   4      
 611   4                                SystemTime=5000;      //1s
 612   4                                ///Barcode触发之
 613   4                                BARCODE_TRIGGER = 0;
C51 COMPILER V9.00   MAIN                                                                  03/09/2015 22:43:03 PAGE 11  

 614   4                                DelayMs(1000);
 615   4                                BARCODE_TRIGGER = 1;
 616   4      
 617   4                                ///切换串口线
 618   4                                //Init_Com2();        
 619   4                                //barcode_check();
 620   4                                g_ucGlobalState = STATUS_WEIGHT_CHECK;
 621   4                                break;
 622   4                              }
 623   3      
 624   3                        case STATUS_WEIGHT_CHECK:
 625   3                              {
 626   4                    weight_time = 1000;       //设置1s的延时，避免过度重复的操作
 627   4                                DOORST = 0;               //发信号给牵引电机，开启门栓
 628   4                                if(DOORLS != DOOR_CLOSE)
 629   4                                {
 630   5                                   SystemTime=5000;       //禁止设备进入休眠，一直等待，直到门被关上。
 631   5                                       g_ucGlobalState = STATUS_WEIGHT_CHECK;
 632   5                                       uart_printf("wait door close\r\n");
 633   5                                   break;
 634   5                                }
 635   4                                uart_printf("start weight check!\r\n");
 636   4                                DelayMs(5000);
 637   4                                DOORST = 1;               //发信号给牵引电机，关闭门栓
 638   4                                SystemTime=5000;      //1s
 639   4                                TL1=TL1_5MS_INI;
 640   4                                TH1=TH1_5MS_INI;
 641   4                                ET1=1;
 642   4                                EA=1;
 643   4      
 644   4                                DelayMs(3000);
 645   4                                SystemTime=5000;      //1s
 646   4                                read_current_weight_data = weight_check();
 647   4      
 648   4                                uart_printf("the DOORLS(%d),DOORST(%d)\r\n",DOORLS,DOORST);
 649   4                                g_ucGlobalState = STATUS_GPRS_SEND;
 650   4                                break;
 651   4                              }
 652   3      
 653   3                        case STATUS_GPRS_SEND:
 654   3                              {
 655   4                                BARCODE_TRIGGER = 1;
 656   4                                SystemTime=5000;      //1s
 657   4                                ///切换串口线
 658   4                                Init_Com1();  
 659   4                                sim900_http();
 660   4                                g_ucGlobalState = STATUS_SLEEP;
 661   4                                while(1);
 662   4                                break;
 663   4                              }
 664   3                    default:
 665   3                           g_ucGlobalState = STATUS_SLEEP;
 666   3                               break;
 667   3                      }
 668   2      
 669   2                      DelayMs(10);
 670   2      
 671   2              }
 672   1      } 
 673          
 674          
 675          
C51 COMPILER V9.00   MAIN                                                                  03/09/2015 22:43:03 PAGE 12  

 676          /********************** 模拟串口相关函数************************/
 677          
 678          void    BitTime(void)   //位时间函数
 679          {
 680   1              uint i;
 681   1              i = ((MAIN_Fosc / 100) * 8) / 140000L - 1;              //根据主时钟来计算位时间 104为9600，8为115200
 682   1              while(--i);
 683   1      }
 684          
 685          //模拟串口发送
 686          void    Tx1Send(uchar dat)              //9600，N，8，1         发送一个字节
 687          {
 688   1              uchar   i;
 689   1              EA = 0;
 690   1              P_TXD1 = 0;
 691   1              BitTime();
 692   1              for(i=0; i<8; i++)
 693   1              {
 694   2                      if(dat & 1)             P_TXD1 = 1;
 695   2                      else                    P_TXD1 = 0;
 696   2                      dat >>= 1;
 697   2                      BitTime();
 698   2              }
 699   1              P_TXD1 = 1;
 700   1              EA = 1;
 701   1              BitTime();
 702   1              BitTime();
 703   1      }
 704          
 705          void sendstring(unsigned char *string)//此处*string相当于数组  
 706          {  
 707   1          while(*string!='\0')//判断是否到字符串末尾  
 708   1          {  
 709   2              Tx1Send(*string);  
 710   2              string++;  
 711   2          }  
 712   1      }
 713          
 714          void uart_printf(const char *fmt,...)  
 715          {  
 716   1          va_list ap;  
 717   1          char xdata string[1024];//访问内部拓展RAM，非访问外部RAM，不能超过内部拓展RAM大小(此处为1024)  
 718   1          va_start(ap,fmt);  
 719   1          vsprintf(string,fmt,ap);//此处也可以使用sprintf函数，用法差不多，稍加修改即可，此处略去  
 720   1          sendstring(string);  
 721   1          va_end(ap);  
 722   1      }
*** WARNING C290 IN LINE 490 OF MAIN.C: missing return value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2345    ----
   CONSTANT SIZE    =    635    ----
   XDATA SIZE       =   ----    1024
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      47
   IDATA SIZE       =     56    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
